package readerAdvisor.speech;

import readerAdvisor.file.FileUtils;
import readerAdvisor.file.HighlightItem;
import readerAdvisor.gui.DebuggerWindow;
import readerAdvisor.gui.RecognizerActionToolbar;
import readerAdvisor.gui.TextWindow;
import readerAdvisor.speech.util.GrammarUtils;

/**
 * Created with IntelliJ IDEA.
 * User: Eduardo
 * Date: 5/4/13
 * Time: 8:29 PM
 * To change this template use File | Settings | File Templates.
 */
public class SpeechManager {
    public static String READING_GRAMMAR = "readerAdvisor.config.xml";
    public static String GRAMMAR         = "readerAdvisor";
    public static String GRAMMAR_FILE    = "readerAdvisor.gram";
    public static String DIRECTORY       = "temp";

    private static volatile SpeechManager speechManager = new SpeechManager();
    private static volatile LiveRecognizer liveRecognizer;
    // Highlight preferences
    private HighlightItem highlightItem = HighlightItem.HYPOTHESIS;

    private SpeechManager(){
         /* Do Nothing */
    }

    public static SpeechManager getInstance(){
        return speechManager;
    }

    public Object clone() throws CloneNotSupportedException{
        throw new CloneNotSupportedException();
    }

    public HighlightItem getHighlightItem(){
        return highlightItem;
    }

    public void setHighlightItem(HighlightItem highlightItem){
        this.highlightItem = highlightItem;
    }

    public synchronized void configureRecognizer() {
        Thread t = new Thread() {
            public void run() {
                // Deallocate current recognizer
                if(liveRecognizer != null){
                    liveRecognizer.deallocate();
                    liveRecognizer = null;
                }

                // Allocate recognizer
                String title = FileUtils.getTextWithoutPath(TextWindow.getInstance().getTitle());
                String text  = FileUtils.getTextAndDigits(TextWindow.getInstance().getText());
		
                LiveRecognizer recognizer;
		try{
		recognizer = new LiveRecognizer(title,READING_GRAMMAR,text);
		}catch(Exception e){e.printStackTrace();}
                // Only allocate the recognizer if the Grammar was built successfully
                if(GrammarUtils.createGrammar(text)){
                    if (recognizer.allocate()) {
                        liveRecognizer = recognizer;

                        // This functionality should not be here but this is the only way to allow for real-time concurrent actions
                        setReadyStateForPlayStopToolbar();
                    }else{
                        DebuggerWindow.getInstance().addTextLineToPanel("Recognizer : " + title + " cannot be allocated!");
                    }
                }
                else{
                    DebuggerWindow.getInstance().addTextLineToPanel("SpeechManager cannot create grammar for the file [" + title + "]");
                }
            }
        };
        t.start();
    }

    private synchronized void setReadyStateForPlayStopToolbar(){
        // Set the toolbar to ready state - keeping concurrent with the rest of the program
        RecognizerActionToolbar.getInstance().setReadyState();
    }

    public synchronized void startRecognizing(){
        if(liveRecognizer == null){
            DebuggerWindow.getInstance().addTextLineToPanel("LiveRecognizer is null");
            return;
        }

        if(liveRecognizer.startRecording()) {
            new DecodingThread(liveRecognizer).start();
        }
        else if(liveRecognizer.isRecording()){
            DebuggerWindow.getInstance().addTextLineToPanel("Live Recognizer is already recording!!!");
        }
        else{
            DebuggerWindow.getInstance().addTextLineToPanel("Live Recognizer cannot start recording!!!");
        }
    }

    public synchronized void pauseRecognizing(){
        if(liveRecognizer == null){
            DebuggerWindow.getInstance().addTextLineToPanel("LiveRecognizer is null");
            return;
        }
        liveRecognizer.stopRecording();
    }

    // When we stop the recognizer : Stop recording, reset the reference and take away all highlights from the TextWindow
    public synchronized void stopRecognizing(){
        SpeechManager.resetUserRecognition(liveRecognizer);
    }

    public void finalize() throws Throwable{
        // Deallocate the current recognizer
        if(liveRecognizer != null){ liveRecognizer.deallocate(); }
        super.finalize();
    }

    public static synchronized void resetUserRecognition(LiveRecognizer recognizer){
        resetUserRecognition(recognizer,false);
    }

    public static synchronized void resetUserRecognition(LiveRecognizer recognizer, boolean disablePlayStopToolbar){
        if(recognizer == null){
            return;
        }
        // Stop recognizing and reset reference
        recognizer.stopRecording();
        recognizer.resetReference();
        TextWindow.getInstance().removeHighlights();
        // We will reset the toolbar to start from beginning
        if(disablePlayStopToolbar){
            RecognizerActionToolbar.getInstance().setReadyState();
        }
    }
}
